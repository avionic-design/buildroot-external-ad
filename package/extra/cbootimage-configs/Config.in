menuconfig BR2_PACKAGE_CBOOTIMAGE_CONFIGS
	bool "cbootimage-configs"
	select BR2_PACKAGE_HOST_CBOOTIMAGE
	depends on BR2_TARGET_UBOOT
	help
	  The cbootimage-configs project contains cbootimage configuration
	  files for many Tegra boards, both those designed by NVIDIA, and
	  various third-parties.

	  https://github.com/NVIDIA/cbootimage-configs


if BR2_PACKAGE_CBOOTIMAGE_CONFIGS

config BR2_PACKAGE_CBOOTIMAGE_CONFIGS_BUILD
	string "board configuration"
	help
	  The full path of a configuration inside cbootimage-configs that is
	  to be built for the board you want to use. The file directory
	  structure usually is <soc>/<vendor>/<board>
	  Example for Jetson TK1:
	  tegra124/nvidia/jetson-tk1

config BR2_PACKAGE_CBOOTIMAGE_CONFIGS_BCT
	string "bct filename"
	help
	  The name of the bct generated by cbootimage for the selected
	  cbootimage configuration. If unsure look it up from the Makefile in
	  the specified board directory.

config BR2_PACKAGE_CBOOTIMAGE_CONFIGS_IMG
	string "img filename"
	help
	  The name of the image generated by cbootimage for the selected
	  cbootimage configuration. If unsure look it up from the Makefile in
	  the specified board directory.

	  Specify the filename without its extension. The extension is
	  automatically appended, according to what image type (signed or
	  unsigned) is built.

config BR2_PACKAGE_CBOOTIMAGE_CONFIGS_IMG_KEY
	string "pkc file to sign image for secureboot"
	help
	  Sign the image using a provided ssl key. This makes it possible to
	  run the image in secureboot environments with the matching key being
	  burned to the tegra fuses.
	  Be aware that the generated image will have the extension simg
	  instead of img if signing is enabled.

	  Compatible key files can be generated with openssl:
	  openssl genrsa -out rsa_priv.pem 2048

config BR2_PACKAGE_CBOOTIMAGE_CONFIGS_GENERATE_FLASHER
	bool "generate self-contained u-boot flasher"
	help
	  Generate an image consisting of a u-boot to flash the actual target
	  u-boot. For this a u-boot with a customized environment is generated
	  that contains a bootcmd to copy a target image into mmc. The actual
	  target u-boot, which is specified in BR2_PACKAGE_CBOOTIMAGE_CONFIGS_IMG is
	  appended to that image so that one self-contained image is generated
	  that can be flashed with tegrarcm.

if BR2_PACKAGE_CBOOTIMAGE_CONFIGS_GENERATE_FLASHER

config BR2_PACKAGE_CBOOTIMAGE_CONFIGS_FLASHER_GPT_FILE
	string "gpt partition table file"
	default "$(BR2_EXTERNAL)/package/extra/cbootimage-configs/gpt-table"
	help
	  Optionally provide a file that contains the partition table to
	  write to mmc.  Use format as specified in u-boot's README.gpt
	  documentation file.

	  Make sure to escape variables properly, as u-boot shall not evaluate
	  the variables when setting the environment variable, but only when
	  running the gpt command.

	  Example file content:
	  uuid_disk=\$\{disk_uuid\};name=rootfs,size=2000MiB,uuid=\$\{rootfs_uuid\};name=data,size=-,uuid=\$\{data_uuid\}

config BR2_PACKAGE_CBOOTIMAGE_CONFIGS_FLASHER_DFU_MAP
	string "enter dfu mode with map"
	default "rootfs part 0 1"
	help
	  Put the device in DFU mode on usb 0 and mmc 0, so that filesystem
	  images can be flashed to the device instantly.

	  This field contains the mapping scheme for partitions to DFU unit
	  names according to u-boot documentation README.dfutftp variable
	  dfu_alt_info.

	  Example:
	  rootfs part 0 1;data part 0 2

config BR2_PACKAGE_CBOOTIMAGE_CONFIGS_FLASHER_EXTRA_BOOTCMD
	string "u-boot flasher bootcmd extras"
	help
	  Specify extra bootcmds you want the u-boot flasher instance to run
	  before resetting the board. For example this could be setting the
	  board environment variable.
endif

endif
