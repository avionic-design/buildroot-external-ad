buildroot-external-ad
=====================

Buildroot external overlay for Avionic Design Meerkat-based systems. Contains
support for building a root-filesystem including Linux4Tegra binary driver
support.

For l4t compatibility buildroot-2014.05 has to be used as base, as later
buildroot releases contain components (especially Xorg) in newer version than
l4t supports.

Quickstart
==========

Prerequistes: You must install the buildroot requirements as described in the
buildroot manual:
http://buildroot.uclibc.org/downloads/manual/manual.html#requirement

0. Create working-directory

# mkdir -p ~/dev/meerkat
# export WORKING_DIR=~/dev/meerkat

1. Grab buildroot and our overlay

# cd ${WORKING_DIR}
# git clone https://github.com/avionic-design/buildroot-external-ad.git
# git clone git://git.buildroot.net/buildroot
# cd ${WORKING_DIR}/buildroot
# git checkout -b 2014.05 2014.05

2. Prepare build

The following commands describe an out-of-tree build, where the O=...
make argument points to a subdirectory build/meerkat-rootfs in the
buildroot top-level directory.

# cd ${WORKING_DIR}/buildroot
# make BR2_EXTERNAL=../buildroot-external-ad O=build/meerkat-rootfs meerkat-l4t_defconfig

In order to configure the Linux kernel for the baseboard, select the
corresponding devicetree:

# make O=build/meerkat-rootfs menuconfig

Select sub-menu "Kernel", item "Device Tree Source file names".  Here,
enter the baseboard devicetree filename as found in the kernel sources
provided by Avionic Design, for example "tegra124-kein-baseboard" or
"tegra124-tobor".  Exit menuconfig, saving the configuration.

3. Start build

If you want to have the cross-compilation toolchain pre-built without
building the root filesystem and kernel, execute:

# make O=build/meerkat-rootfs toolchain

Build the root filesystem and the kernel:

# make O=build/meerkat-rootfs

This generates a kernel zImage, devicetree blob, uImage, and rootfs.

For example, if you are building for the "kein-baseboard" baseboard, the
following output files are generated:
# ls -1F build/meerkat-rootfs/images/
# rootfs.ext2
# rootfs.ext4@
# tegra124-kein-baseboard.dtb
# uImage-tegra124-kein-baseboard
# zImage*

The format of the rootfs depends on the buildroot configuration and can
be either a tarball (rootfs.tar) or a filesystem image (e.g.
rootfs.ext4).  Filenames will also vary depending on the baseboard
chosen in step 2.

uImage-tegra124-kein-baseboard can be loaded by u-boot to boot the kernel.
rootfs.tar or rootfs.ext4 contains a root filesystem including Xorg and
nvidia L4T drivers.

4. Flash the rootfs onto the eMMC

In order to flash the root filesystem onto the eMMC on the Meerkat COM,
you can leverage USB mass storage support (aka UMS) in u-boot, which
lets you write to the eMMC as a standard block device on the host.
Current u-boot builds from Avionic Design automatically drop into UMS
mode if no bootable OS is found.  Otherwise, UMS in u-boot can still be
started manually.  To do this, first interrupt the boot sequence in
u-boot by hitting any key, which drops into the u-boot shell. There,
enter:

# run bootcmd_ums0

This turns the eMMC into a standard USB mass storage block device (with
ID 0955:701a) that can be accessed via the recovery USB port.  The BSP
comes with a helper script board/meerkat-l4t/flash.sh which, provided
with the filename of a rootfs image, automatically identifies the K1 USB
mass storage device on the host, creates a single partition on it,
and writes the filesystem image:

# ../buildroot-external-ad/board/meerkat-l4t/flash.sh \
	build/meerkat-rootfs/images/rootfs.ext4

When the process has completed, exit UMS in u-boot by hitting Ctrl-C.
The system is now ready to boot from the eMMC.

5. Default password for root and the default user

The two buildroot configurations meerkat-l4t_defconfig and
meerkat-l4t-bsp_defconfig install passwords for root and the default
user.

Use "password" to login.
